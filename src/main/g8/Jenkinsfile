pipeline {
  agent {
    label 'sbt-slave'
  }

  environment {
    // Ensure that build scripts recognise the environment they are running within
    CI = 'jenkins'
    // Use the git SHA to gain some integration test isolation
    DOCKER_COMPOSE_PROJECT_NAME = sh(returnStdout: true, script: "git rev-parse --verify HEAD").trim()
  }

  stages {
    stage('Environment') {
      steps {
        ansiColor('xterm') {
          script {
            sh "sbt checkExternalBuildTools"
            sh "sbt dockerComposeConfigCheck"
            sh "sbt dockerComposeDown"
            sh "docker images"
            sh "docker ps -a"
          }
        }
      }
    }

    stage('Compile') {
      steps {
        ansiColor('xterm') {
          script {
            sh "sbt clean compile test:compile it:compile doc"
          }
        }
      }
    }

    stage('Verification') {
      steps {
        ansiColor('xterm') {
          script {
            // TODO: CO-167: enable sbt-header for integration tests
            sh "sbt headerCheck test:headerCheck scalastyle test:scalastyle it:scalastyle sbt:scalafmt::test scalafmt::test test:scalafmt::test it:scalafmt::test"
          }
        }
      }
    }

    stage('Test') {
      steps {
        ansiColor('xterm') {
          script {
            // Ensure that coverage reporting doesn't fail when generating reports
            // - the report aggregation step will generate necessary failures!
            sh "sbt coverage test 'set coverageMinimum := 0' coverageReport"
            sh "sbt coverageAggregate"
          }
        }
      }
    }

    stage('IntegrationTest') {
      steps {
        ansiColor('xterm') {
          script {
            // In CI environments, we use the eth0 or local-ipv4 address of the slave
            // instead of localhost
            try {
              sh "sbt coverageOff dockerComposeUp"
              def dockerip = sh(returnStdout: true, script:  \$/wget http://169.254.169.254/latest/meta-data/local-ipv4 -qO-/\$).trim()
              withEnv(["CI_HOST=\$dockerip"]) {
                sh "sbt it:test"
              }
            } finally {
              sh "sbt dockerComposeDown"
            }
          }
        }
      }
    }

    stage('Publish') {
      steps {
        ansiColor('xterm') {
          sh "sbt createRelease"
        }
      }
    }
  }
}
